<!doctype HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Language" content="ru">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" href="css.css" type="text/css">
<TITLE>JavaScript. Обзор.</TITLE></HEAD>
<BODY>
<h5><a href="contents.htm"><font size="-1">Оглавление</font></a><FONT SIZE=-1> |
<a href="preface.htm">Назад</a>
| <a href="partbase.htm">Вперёд</a>
| <a href="bklast.htm">Индекс</a></FONT></h5><HR><h1>Глава 1<BR><A NAME="1009367"></a>JavaScript. Обзор.</h1>
<p><A NAME="1009368"></a>Это введение в JavaScript и обсуждение некоторых 
фундаментальных понятий.</p>
<p><A NAME="1014485"></a>В главе имеются следующие разделы:</p>
<ul><LI><A NAME="1014490"></a><A HREF="#1009369">Что Такое JavaScript?</A></LI><LI><A NAME="1022257"></a>
<A HREF="#1022274">Ядро, Клиентский и Серверный JavaScript</A></LI><LI><A NAME="1016916"></a>
<A HREF="#1012569">JavaScript и Java</A></LI><LI><A NAME="1016878"></a>
  <a href="#1009909">Отладка в JavaScript</a></LI><LI><A NAME="1016879"></a>
<A HREF="#1013886">Visual JavaScript</A></LI><LI><A NAME="1016880"></a>
<A HREF="#1013654">JavaScript и Спецификация ECMA</A></LI></ul>
<H2><A NAME="What Is JavaScript?"></A><A NAME="1009369"></a>Что Такое JavaScript?</H2><hr>
<p><A NAME="1022262"></a>JavaScript это созданный фирмой Netscape 
межплатформенный, объектно-ориентированный язык скриптинга (сценариев).
Ядро JavaScript содержит набор основных объектов, таких как <CODE>Array</CODE>, <CODE>Date</CODE> 
и
<CODE>Math</CODE>, и основной набор элементов языка, таких как операции, 
структуры управления и операторы. Ядро JavaScript может быть расширено для 
различных целей путём дополнения новыми объектами; например:</p>
<ul><LI><A NAME="1016040"></a>
<I>Клиентский JavaScript</I> расширяет ядро языка, предоставляя объекты 
управления браузером (Navigator или другой web-браузер) и Document Object Model (DOM). Например,
клиентские расширения дают приложению возможность размещать элементы в HTML-форме 
и реагировать на действия пользователя, такие как щелчок мыши, ввод данных в 
форму и навигация по страницам.</LI><LI><A NAME="1016010"></a>
<I>Серверный JavaScript</I> расширяет ядро языка, предоставляя объекты, относящиеся к запуску JavaScript
на сервере. Например, серверные расширения дают приложению возможность 
соединяться с реляционной БД, сохранять информацию между вызовами приложения 
или выполнять работу с файлами на сервере.</LI></ul><p><A NAME="1022267"></a>
JavaScript позволяет создавать приложения, работающие по всей сети Internet. 
Клиентские приложения работают в браузере,
таком как Netscape Navigator, а серверные приложения - на сервере, таком как Netscape Enterprise Server.
Используя JavaScript, Вы можете создавать динамические HTML-страницы, 
обрабатывающие пользовательский ввод и имеющиеся данные, используя специальные 
объекты, файлы и реляционные БД.</p>
<p><A NAME="1016777"></a>С помощью функциональности JavaScript LiveConnect Вы 
можете организовать взаимодействие кодов Java и
JavaScript. Из JavaScript Вы можете инстанциировать объекты Java и получать 
доступ к их public-методам и полям. Из Java Вы можете получать доступ к 
объектам, свойствам и методам JavaScript.</p>
<p><A NAME="1021034"></a>Корпорация Netscape изобрела JavaScript, и JavaScript был впервые 
использован в браузерах Netscape.</p>
<H2><A NAME="Core, Client-Side, and Server-Side JavaScript"></A><A NAME="1022274"></a>
 Ядро, Клиентский и Серверный&nbsp; JavaScript</H2><hr><p><A NAME="1022275"></a>
Компоненты JavaScript показаны на рисунке:</p><h6><A NAME="1022280"></a>
Рисунок 1.1&nbsp;&nbsp;&nbsp;Язык JavaScript</h6>
<P><IMG SRC="graphics/lang.gif" width="474" height="364"></P>
<p><A NAME="1022281"></a>В следующем разделе разбирается работа JavaScript на 
стороне клиента и на сервере.</p>
<h4><A NAME="Head2;"></A><A NAME="1022283"></a>Ядро JavaScript</h4><hr>
<p><A NAME="1022284"></a>Клиентский и серверный JavaScript имеют следующие общие 
элементы:</p>
<ul><LI><A NAME="1022285"></a>Ключевые слова</LI><LI><A NAME="1022286"></a>
Синтаксис операторов и грамматику</LI><LI><A NAME="1022287"></a>
Правила написания выражений, переменных и литералов</LI><LI><A NAME="1022288"></a>
Лежащую в основе объектную модель (хотя клиентский и серверный JavaScript 
имеют разные предопределённые объекты)</LI><LI><A NAME="1022289"></a>
Предопределённые объекты и функции, такие как <CODE>Array</CODE>, <CODE>Date</CODE> 
и <CODE>Math</CODE></LI></ul>
<h4><A NAME="Head2;"></A><A NAME="1022293"></a>Клиентский JavaScript</h4><hr><p><A NAME="1022294"></a>
Web-браузеры, такие как Navigator (2.0 и более поздние версии) могут 
интерпретировать операторы клиентского JavaScript, внедрённые в HTML-страницу. 
Когда браузер (или <i>клиент</i>) запрашивает такую страницу, сервер высылает 
клиенту по сети полное содержимое документа, включая HTML и операторы JavaScript.
Браузер читает страницу сверху вниз, отображая результат работы HTML и выполняя 
операторы
JavaScript по мере их обнаружения. Этот процесс, проиллюстрированный на рисунке, 
производит результат, который видит пользователь.</p><h6><A NAME="1022300"></a>
Рисунок 1.2&nbsp;&nbsp;&nbsp;Клиентский JavaScript</h6>
<P><IMG SRC="graphics/csrt.gif" width="379" height="457"></P>
<p><A NAME="1022301"></a>Операторы клиентского JavaScript, встроенного в HTML-страницу, 
могут реагировать на пользовательские события, такие как щелчок мыши, ввод 
данных в форму и навигация по страницам. Например, Вы можете написать функцию
JavaScript для проверки ввода пользователем правильной информации в форму, 
запрашивающую телефонный номер или zip-код. Без передачи по сети внедрённый JavaScript 
на HTML-странице может проверить введённые данные и вывести диалоговое окно, 
если пользователь ввёл неверные данные.</p>
<p><A NAME="1016118"></a>Разные версии JavaScript работают со специфическими 
версиями Navigator'а.
Например, JavaScript&nbsp;1.2 работает с Navigator 4.0. Некоторые возможности JavaScript 1.2
недоступны в JavaScript 1.1 и поэтому недоступны в Navigator&nbsp;3.0. Информацию о версиях
JavaScript и Navigator см. в разделе <A HREF="preface.htm#1026242">"Версии JavaScript"</A>.</p>
<h4><A NAME="Head2;"></A><A NAME="1022316"></a>Серверный JavaScript</h4><hr><p><A NAME="1022317"></a>
На сервере Вы также можете внедрять JavaScript в HTML-страницы. Серверные 
операторы могут соединяться с реляционными БД разных производителей, разделять 
информацию между пользователями приложения, получать доступ к файловой системе 
сервера или взаимодействовать с другими приложениями через LiveConnect и Java. HTML-страницы 
с серверным JavaScript могут содержать также клиентский JavaScript.</p><p><A NAME="1022318"></a>
В отличие от страниц с чисто клиентским JavaScript, HTML-страницы, использующие 
серверный JavaScript, компилируются в байт-кодовые исполняемые файлы. Эти 
исполняемые приложения запускаются на выполнение web-сервером, имеющим машину 
времени выполнения JavaScript. Исходя из этого, создание приложений JavaScript 
это процесс из двух этапов.</p><p><A NAME="1022324"></a>
На первом этапе, показанном на <A HREF="#1022330">Рисунке 1.3</A>, Вы создаёте HTML-страницы (которые 
могут содержать операторы как клиентского, так и серверного JavaScript) и файлы JavaScript. 
Затем Вы компилируете все эти файлы в единый исполняемый блок.</p><h6><A NAME="1022330"></a>
Рисунок 1.3&nbsp;&nbsp;&nbsp;Серверный JavaScript в процессе разработки</h6>
<P><IMG SRC="graphics/ssdev.gif" width="489" height="405"></P><p><A NAME="1022334"></a>
На втором этапе, показанном на <a href="#1022340">Рисунке 1.4</a>, страница 
приложения запрашивается клиентским браузером. Машина выполнения использует 
исполняемый блок для просмотра исходной страницы и динамической генерации HTML-страницы, 
возвращаемой клиенту. Она выполняет все найденные на странице операторы 
серверного JavaScript.
Выполнение этих операторов может добавить новые операторы HTML или операторы 
клиентского JavaScript в HTML-страницу.
Машина выполнения отсылает затем окончательный вариант страницы по сети Navigator-клиенту, 
который выполняет клиентский JavaScript и отображает результат.</p><h6><A NAME="1022340"></a>
Рисунок 1.4&nbsp;&nbsp;&nbsp;Серверный JavaScript в процессе выполнения</h6>
<P><IMG SRC="graphics/ssrt.gif" width="480" height="459"></P><p><A NAME="1022341"></a>
В отличие от стандартных программ Common Gateway Interface (CGI), все исходники JavaScript 
интегрированы непосредственно в HTML-страницы, ускоряя разработку и облегчая обслуживание. Служба Session
Management Service серверного JavaScript содержит объекты, которые Вы можете 
использовать для работы с данными, существующими между клиентскими запросами,
у нескольких клиентов или нескольких приложений. Служба LiveWire Database Service 
серверного JavaScript предоставляет объекты для доступа к БД, служащие 
интерфейсом для серверов Structured Query Language (SQL).</p>
<H2><A NAME="JavaScript and Java"></A><A NAME="1012569"></a>JavaScript и Java</H2><hr><p><A NAME="1019782"></a>
JavaScript и Java напоминают друг друга, но имеют и фундаментальные отличия.
JavaScript не имеет статической типизации и строгой проверки типов Java.
JavaScript поддерживает большую часть синтаксиса выражений Java и базовые 
конструкции управления потоком.</p>
<p><A NAME="1020614"></a>В отличие от системы времени компиляции Java, 
построенной на объявлениях,
JavaScript поддерживает систему времени выполнения, основанную на небольшом 
количестве типов данных: числовых, Булевых и строковых. JavaScript имеет 
объектную модель на базе прототипов вместо более общей объектной модели на базе 
классов. Модель на базе прототипов предоставляет возможность динамического 
наследования; то есть, то, что наследуется, может отличаться для разных объектов. JavaScript 
также поддерживает функции без специальных требований объявления.
Функции могут быть свойствами объектов, исполняемыми как нетипизированные методы.</p>
<p><A NAME="1020620"></a>JavaScript это язык, свободный по форме, по сравнению с Java. 
Вы не должны объявлять все переменные, классы и методы. Вы не должны учитывать, 
являются ли методы public,
private или protected, и не обязаны реализовывать интерфейсы. 
Return-типы переменных, параметров и функций не типизированы явно.</p><p><A NAME="1009453"></a>
Java это язык на базе классов, разработанный для быстрого выполнения и строгой 
типизации. Строгая типизация означает,
к примеру, что Вы не можете привести/cast целое число Java (integer) к ссылке на 
объект или получить доступ к private-памяти, нарушая байт-коды Java. Модель Java 
на базе классов означает, что программы состоят исключительно из классов и их 
методов. Наследование классов в Java и строгая типизация обычно требуют тесно 
выстроенной иерархий объектов.
Эти требования делают программирование на Java более сложным, чем авторизация на JavaScript.</p>
<p><A NAME="1009454"></a>В противоположность этому, JavaScript ведёт своё начало 
от небольших динамически типизированных языков, таких как HyperTalk и dBASE. Эти 
языки сценариев предоставляют утилиты программирования для более широкой 
аудитории, поскольку имеют облегчённый синтаксис, специализированную встроенную 
функциональность и минимальные требования при создании объектов.</p><A NAME="1014431"></a><h5><A NAME="1009457"></a>
Таблица 1.1&nbsp; JavaScript в сравнении с Java</h5>
<TABLE BORDER="2" CELLPADDING=5><TR><TH VALIGN=baseline ALIGN=left><A NAME="1009461"></a>JavaScript
<TH VALIGN=baseline ALIGN=left><A NAME="1009463"></a>Java<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009465"></a>
Интерпретируется (не компилируется) клиентом.</P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009467"></a>
Скомпилированные байт-коды, загруженные с сервера, выполняются на клиенте.</P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009469"></a>
Объектно-ориентированный. Нет отличий между типами объектов. Наследование осуществляется через механизм прототипов,
а свойства и методы могут добавляться к объекту динамически.</P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009471"></a>
На базе классов. Объекты делятся на классы и экземпляры, наследующие по всей 
цепи иерархии классов. Классы и экземпляры не могут иметь свойства и методы, добавляемые динамически.</P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009473"></a>
Коды интегрированы и внедрены в HTML.</P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009475"></a>
Аплеты отличаются от HTML (доступ к ним осуществляется из HTML-страниц).</P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009477"></a>
Типы переменных не объявляются (динамическая типизация).</P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009479"></a>
Типы переменных обязаны быть объявлены (статическая типизация).</P>
<TR><TD VALIGN=baseline ALIGN=left><P><A NAME="1009485"></a>
Не может автоматически записывать на жёсткий диск.</P><TD VALIGN=baseline ALIGN=left><P><A NAME="1009487"></a>
Не может автоматически записывать на жёсткий диск.</P></TABLE>
<H2><A NAME="Debugging JavaScript"></A><A NAME="1009909"></a>Отладка в JavaScript</H2><hr>
<p><A NAME="1009911"></a>JavaScript позволяет создавать сложные компьютерные 
программы. Как и во всех других языках,
Вы можете ошибаться при написании скриптов. Отладчик Netscape JavaScript Debugger 
даёт возможность отлаживать Ваши скрипты.</p><p><A NAME="1016499"></a>об 
использовании Отладчика см. <EM>
<A HREF="http://developer.netscape.com/docs/manuals/jsdebug/index.htm" TARGET="_top">Getting Started with
Netscape JavaScript Debugger</A></EM>.</p><H2><A NAME="Visual JavaScript"></A>
<A NAME="1013886"></a>Visual JavaScript</H2><hr><p><A NAME="1015526"></a>
Netscape Visual JavaScript это утилита визуальной разработки на базе компонентов 
для платформы Netscape Open Network
Environment (ONE). Он первоначально предназначался для использования 
разработчиками межплатформенных стандартизованных web-приложений из готовых 
компонентов с минимальными затратами на программирование. Эти приложения 
базируются на HTML, JavaScript и Java.</p>
<p><A NAME="1015907"></a>О Visual JavaScript см. <EM>
<A HREF="http://developer.netscape.com/docs/manuals/visualjs/index.htm" TARGET="_top">Visual JavaScript
Developer's Guide</A></EM>.</p><H2><A NAME="JavaScript and the ECMA Specification"></A>
<A NAME="1013654"></a>JavaScript и Спецификация ECMA</H2><hr><p><A NAME="1020727"></a>
Netscape изобрела JavaScript, и JavaScript был впервые использован в браузерах Netscape. 
Одновременно Netscape работает с <A HREF="http://www.ecma.ch" TARGET="_top">ECMA</A> (European Computer Manufacturers Association)
для создания стандартизованного международного языка программирования на базе 
ядра JavaScript. ECMA это международная ассоциация стандартов в области систем 
информации и коммуникаций. Эта стандартизованная версия JavaScript, называемая ECMAScript, 
ведёт себя совершенно одинаково во всех приложениях, поддерживающих этот стандарт.
Компании могут использовать этот открытый стандартный язык для создания своих 
реализаций JavaScript. Первая версия стандарта ECMA документирована в спецификации ECMA-262.</p>
<p><A NAME="1013667"></a>
Стандарт ECMA-262 одобрен также <A HREF="http://www.iso.ch" TARGET="_top">ISO</A> (International Organization for Standards) 
как ISO-16262. Вы можете найти <A HREF="http://developer.netscape.com/docs/javascript/e262-pdf.pdf" TARGET="_top">PDF-версию ECMA-262</A> 
на Netscape DevEdge Online. Вы также можете найти эту
<a href="http://www.ecma.ch/stand/ecma-262.htm">спецификацию</a> на сайте ECMA. 
Спецификация ECMA не описывает Document Object Model (DOM), которая 
стандартизуется консорциумом <A HREF="http://www.w3.org" TARGET="_top">World Wide Web Consortium (W3C)</A>.
DOM определяет способ, которым объекты HTML-документа экспонируются в скрипте.</p>
<h4><A NAME="Head2;"></A><A NAME="1013678"></a>Соотношение Между Версиями JavaScript и ECMA</h4><hr>
<p><A NAME="1014160"></a>Netscape тесно сотрудничает с ECMA для создания спецификации ECMA.</p>
<p><A NAME="1020924"></a>Детальную информацию о соотношении версий спецификаций JavaScript
и ECMA см. на сайте mozilla.org.</p><p><A NAME="1020935"></a>
JavaScript всегда будет содержать возможности, не включённые в спецификацию ECMA; JavaScript 
совместим с ECMA, предоставляя дополнительные возможности.</p>
<h4><A NAME="Head2;"></A><A NAME="1013717"></a>Документация JavaScript и Спецификация ECMA</h4><hr>
<p><A NAME="1013719"></a>Спецификация ECMA это набор требований по реализации ECMAScript; 
она применима, если Вам необходимо определить, поддерживается ли возможность из JavaScript 
в ECMA. Если Вы планируете написать код JavaScript, использующий только 
возможности, поддерживаемые ECMA, Вам может понадобиться просмотреть спецификацию
ECMA.</p><p><A NAME="1013720"></a>Документ ECMA не предназначен для помощи 
программистам скриптов; для этого используйте документацию JavaScript.</p>
<h4><A NAME="Head2;"></A><A NAME="1013722"></a>JavaScript и Технология ECMA</h4><hr>
<p><A NAME="1013723"></a>Спецификация ECMA использует терминологию и синтаксис, 
которые могут быть незнакомы программистам JavaScript. Хотя описание языка может 
отличаться в ECMA, сам язык остаётся тем же самым. JavaScript поддерживает всю 
функциональность, данную в спецификации ECMA.</p>
<p><A NAME="1013724"></a>Документация по JavaScript описывает аспекты языка, 
необходимые программисту на JavaScript. Например:</p>
<ul><LI><A NAME="1013726"></a>Объект global не обсуждается в документации JavaScript, 
поскольку Вы не используете его явно. Методы и свойства объекта global, 
используемого Вами, обсуждаются в документации JavaScript, но называются 
функциями и свойствами верхнего уровня.</LI><LI><A NAME="1013727"></a>
Конструктор без параметров (zero-argument) с объектами <CODE>Number</CODE> и <CODE>String</CODE> 
не обсуждается в документации JavaScript, поскольку то, что генерируется, используется мало.
<CODE>Number</CODE> -конструктор без аргументов возвращает +0, а <CODE>String</CODE> 
-конструктор без аргументов возвращает "" (пустую строку).</LI></ul>
<h5><a href="contents.htm"><font size="-1">Оглавление</font></a> |
<a href="preface.htm">Назад</a>
| <a href="partbase.htm">Вперёд</a>
| <a href="bklast.htm">Индекс</a></h5>
<hr><P ALIGN=right><FONT SIZE=-2><I>Дата последнего обновления: 29 сентября 1999 г.</I></FONT><P><FONT FACE="PrimaSans BT, Verdana, Sans-Serif" SIZE=-2>
&copy; Copyright © 1999 Sun Microsystems, Inc. Некоторая часть Copyright 
© 1999 Netscape Communications Corp. Все Права Зарезервированы.</FONT>
</BODY></HTML>